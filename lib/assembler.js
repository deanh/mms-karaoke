// Generated by CoffeeScript 1.6.3
(function() {
  var Assembler, async, formatOutput, oa, rest, timeDiff, util, _;

  async = require('async');

  rest = require('restler');

  oa = require('openaura-api');

  util = oa.util;

  _ = require('lodash');

  Assembler = function(mmApiKey, oaApiKey, mmTrackIds, oaAnchorId, cb) {
    var id, mmCall, mmUrls, mmc, particles, pc, prop;
    prop = util.prop;
    if (mmTrackIds.error != null) {
      return cb(mmTrackIds);
    }
    console.log(mmTrackIds);
    mmUrls = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = mmTrackIds.length; _i < _len; _i++) {
        id = mmTrackIds[_i];
        _results.push("http://api.musixmatch.com/ws/1.1/track.subtitle.get?track_id=" + id + "&apikey=" + mmApiKey + "&subtitle_format=mxm");
      }
      return _results;
    })();
    console.log(mmUrls);
    mmCall = rest.get(mmUrls[0]);
    particles = new oa.particles(oaApiKey, "http://api.openaura.com/v1", 500);
    pc = function(pcb) {
      return particles.byOaAnchorId(oaAnchorId, function() {
        console.log("parrticles cb error");
        return pcb("nope", null);
      }, function(ps) {
        console.log("particles cb success");
        return pcb(null, ps);
      });
    };
    mmc = function(pcb) {
      mmCall.on('success', function(data, res) {
        console.log("musixmatch cb success");
        console.log("#>", data);
        return pcb(null, data);
      });
      return mmCall.on('failure', function(data, res) {
        console.log("musixmatch cb failure");
        return pcb(res, null);
      });
    };
    return async.parallel({
      oa: pc,
      mm: mmc
    }, function(err, results) {
      var mm, mmTitles, oap, res, subtitles;
      mm = JSON.parse(results.mm);
      if (subtitles = prop(mm, "message.body.subtitle.subtitle_body")) {
        mmTitles = JSON.parse(subtitles);
      } else {
        mmTitles = [];
      }
      oap = _.filter(results.oa.particles, function(p) {
        var _ref;
        return ((_ref = p.media) != null ? _ref.length : void 0) > 0;
      });
      res = _.chain(_.zip(mmTitles, oap)).map(function(pair) {
        var v;
        v = formatOutput(pair);
        console.dir(v);
        return v;
      }).compact().value();
      return cb(res);
    });
  };

  timeDiff = function(t1, t2) {
    var hPart, mPart, sPart;
    mPart = (t2.minutes - t1.minutes) * 60 * 1000;
    sPart = (t2.seconds - t1.seconds) * 1000;
    hPart = (t2.hundredths - t1.hundredths) * 10;
    return mPart + sPart + hPart;
  };

  formatOutput = function(_arg) {
    var list, lyric, m, media, particle, prop, ret;
    lyric = _arg[0], particle = _arg[1];
    prop = util.prop;
    media = prop(particle, "media");
    if (media) {
      list = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = media.length; _i < _len; _i++) {
          m = media[_i];
          if (parseInt(m.width) > 200 && parseInt(m.height) > 200) {
            _results.push(m);
          }
        }
        return _results;
      })();
      if ((list != null) && list.length > 0) {
        return ret = {
          lyric: prop(lyric, "text"),
          imgUrl: prop(list[0], "url")
        };
      }
    }
  };

  module.exports = Assembler;

}).call(this);
